// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module design_1_v_tpg_0_0_tpgPatternBox (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        pixIn,
        pixIn6,
        pixIn7,
        pixIn8,
        pixIn9,
        pixIn10,
        y,
        x,
        width,
        height,
        boxSize,
        boxColorR,
        boxColorG,
        boxColorB,
        motionSpeed,
        color,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [7:0] pixIn;
input  [7:0] pixIn6;
input  [7:0] pixIn7;
input  [7:0] pixIn8;
input  [7:0] pixIn9;
input  [7:0] pixIn10;
input  [15:0] y;
input  [15:0] x;
input  [15:0] width;
input  [15:0] height;
input  [15:0] boxSize;
input  [7:0] boxColorR;
input  [7:0] boxColorG;
input  [7:0] boxColorB;
input  [7:0] motionSpeed;
input  [7:0] color;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
reg   [15:0] boxHCoord;
reg   [15:0] boxVCoord;
reg   [0:0] hDir;
reg   [0:0] vDir;
wire    ap_block_pp0_stage0_11001;
reg   [15:0] x_read_reg_627;
reg   [15:0] x_read_reg_627_pp0_iter1_reg;
reg   [15:0] y_read_reg_635;
reg   [15:0] y_read_reg_635_pp0_iter1_reg;
reg   [7:0] pixIn10_read_reg_642;
reg   [7:0] pixIn10_read_reg_642_pp0_iter1_reg;
reg   [7:0] pixIn10_read_reg_642_pp0_iter2_reg;
reg   [7:0] pixIn9_read_reg_647;
reg   [7:0] pixIn9_read_reg_647_pp0_iter1_reg;
reg   [7:0] pixIn9_read_reg_647_pp0_iter2_reg;
reg   [7:0] pixIn8_read_reg_652;
reg   [7:0] pixIn8_read_reg_652_pp0_iter1_reg;
reg   [7:0] pixIn8_read_reg_652_pp0_iter2_reg;
reg   [7:0] pixIn7_read_reg_657;
reg   [7:0] pixIn7_read_reg_657_pp0_iter1_reg;
reg   [7:0] pixIn7_read_reg_657_pp0_iter2_reg;
reg   [7:0] pixIn6_read_reg_662;
reg   [7:0] pixIn6_read_reg_662_pp0_iter1_reg;
reg   [7:0] pixIn6_read_reg_662_pp0_iter2_reg;
reg   [7:0] pixIn_read_reg_667;
reg   [7:0] pixIn_read_reg_667_pp0_iter1_reg;
reg   [7:0] pixIn_read_reg_667_pp0_iter2_reg;
wire   [0:0] trunc_ln1824_fu_212_p1;
reg   [0:0] trunc_ln1824_reg_672;
reg   [0:0] trunc_ln1824_reg_672_pp0_iter1_reg;
reg   [0:0] trunc_ln1824_reg_672_pp0_iter2_reg;
wire   [15:0] hMax_fu_216_p2;
wire   [15:0] vMax_fu_222_p2;
wire   [0:0] icmp_fu_238_p2;
wire   [15:0] select_ln1866_fu_353_p3;
wire   [0:0] icmp_ln1839_fu_251_p2;
wire   [15:0] select_ln1870_fu_379_p3;
wire   [0:0] or_ln1897_fu_430_p2;
reg   [0:0] or_ln1897_reg_735;
wire   [0:0] icmp_ln1897_2_fu_436_p2;
reg   [0:0] icmp_ln1897_2_reg_741;
wire   [0:0] icmp_ln1897_3_fu_441_p2;
reg   [0:0] icmp_ln1897_3_reg_746;
wire   [0:0] icmp_ln1897_4_fu_452_p2;
reg   [0:0] icmp_ln1897_4_reg_751;
wire   [0:0] icmp_ln1897_5_fu_458_p2;
reg   [0:0] icmp_ln1897_5_reg_756;
reg   [0:0] ap_phi_mux_empty_phi_fu_163_p8;
wire   [0:0] ap_phi_reg_pp0_iter1_empty_reg_160;
wire   [0:0] hDir_load_load_fu_265_p1;
wire   [0:0] icmp_ln1844_fu_269_p2;
wire   [0:0] icmp_ln1849_fu_291_p2;
reg   [0:0] ap_phi_mux_empty_66_phi_fu_180_p8;
wire   [0:0] ap_phi_reg_pp0_iter1_empty_66_reg_177;
wire   [0:0] vDir_load_load_fu_303_p1;
wire   [0:0] icmp_ln1856_fu_307_p2;
wire   [0:0] icmp_ln1861_fu_329_p2;
wire   [15:0] ap_phi_reg_pp0_iter0_boxLeft_reg_194;
reg   [15:0] ap_phi_reg_pp0_iter1_boxLeft_reg_194;
reg   [15:0] ap_phi_reg_pp0_iter2_boxLeft_reg_194;
wire   [15:0] ap_phi_reg_pp0_iter0_boxTop_reg_203;
reg   [15:0] ap_phi_reg_pp0_iter1_boxTop_reg_203;
reg   [15:0] ap_phi_reg_pp0_iter2_boxTop_reg_203;
wire    ap_block_pp0_stage0;
wire   [6:0] tmp_fu_228_p4;
wire   [15:0] or_ln1839_fu_247_p2;
wire   [8:0] shl_ln_fu_280_p3;
wire   [15:0] zext_ln1849_fu_287_p1;
wire   [8:0] shl_ln1_fu_318_p3;
wire   [15:0] zext_ln1861_fu_325_p1;
wire   [15:0] zext_ln1824_fu_244_p1;
wire   [15:0] sub_ln1869_fu_341_p2;
wire   [15:0] add_ln1867_fu_347_p2;
wire   [15:0] sub_ln1873_fu_367_p2;
wire   [15:0] add_ln1871_fu_373_p2;
wire   [15:0] boxRight_fu_400_p2;
wire   [15:0] boxBottom_fu_405_p2;
wire   [0:0] icmp_ln1897_fu_414_p2;
wire   [0:0] icmp_ln1897_1_fu_425_p2;
wire   [0:0] xor_ln1897_fu_419_p2;
wire   [16:0] zext_ln1839_fu_393_p1;
wire   [16:0] add_ln1892_fu_446_p2;
wire   [16:0] zext_ln1881_fu_396_p1;
wire   [16:0] boxRight_cast_fu_410_p1;
wire   [0:0] or_ln1897_1_fu_469_p2;
wire   [0:0] xor_ln1897_1_fu_464_p2;
wire   [0:0] xor_ln1902_fu_479_p2;
wire   [0:0] and_ln1902_fu_484_p2;
wire   [0:0] or_ln1897_2_fu_473_p2;
wire   [7:0] pixOut_val_V_1_fu_489_p3;
wire   [0:0] or_ln1897_3_fu_519_p2;
wire   [0:0] xor_ln1897_2_fu_514_p2;
wire   [0:0] or_ln1902_fu_529_p2;
wire   [0:0] or_ln1897_4_fu_523_p2;
wire   [7:0] pixOut_val_V_4_fu_533_p3;
wire   [7:0] pixOut_val_V_0_fu_508_p3;
wire   [7:0] pixOut_val_V_1_1_fu_495_p3;
wire   [7:0] pixOut_val_V_2_fu_502_p3;
wire   [7:0] pixOut_val_V_3_fu_539_p3;
wire   [7:0] pixOut_val_V_4_1_fu_545_p3;
wire   [7:0] pixOut_val_V_5_fu_552_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_192;
reg    ap_condition_248;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 boxHCoord = 16'd0;
#0 boxVCoord = 16'd0;
#0 hDir = 1'd0;
#0 vDir = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_192)) begin
        if ((icmp_ln1839_fu_251_p2 == 1'd0)) begin
            ap_phi_reg_pp0_iter2_boxLeft_reg_194 <= boxHCoord;
        end else if ((icmp_ln1839_fu_251_p2 == 1'd1)) begin
            ap_phi_reg_pp0_iter2_boxLeft_reg_194 <= select_ln1866_fu_353_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_boxLeft_reg_194 <= ap_phi_reg_pp0_iter1_boxLeft_reg_194;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_192)) begin
        if ((icmp_ln1839_fu_251_p2 == 1'd0)) begin
            ap_phi_reg_pp0_iter2_boxTop_reg_203 <= boxVCoord;
        end else if ((icmp_ln1839_fu_251_p2 == 1'd1)) begin
            ap_phi_reg_pp0_iter2_boxTop_reg_203 <= select_ln1870_fu_379_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_boxTop_reg_203 <= ap_phi_reg_pp0_iter1_boxTop_reg_203;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_248)) begin
        if (((icmp_ln1849_fu_291_p2 == 1'd1) & (hDir_load_load_fu_265_p1 == 1'd1))) begin
            hDir <= 1'd0;
        end else if (((icmp_ln1844_fu_269_p2 == 1'd1) & (hDir_load_load_fu_265_p1 == 1'd0))) begin
            hDir <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_248)) begin
        if (((icmp_ln1861_fu_329_p2 == 1'd1) & (vDir_load_load_fu_303_p1 == 1'd1))) begin
            vDir <= 1'd0;
        end else if (((icmp_ln1856_fu_307_p2 == 1'd1) & (vDir_load_load_fu_303_p1 == 1'd0))) begin
            vDir <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_boxLeft_reg_194 <= ap_phi_reg_pp0_iter0_boxLeft_reg_194;
        ap_phi_reg_pp0_iter1_boxTop_reg_203 <= ap_phi_reg_pp0_iter0_boxTop_reg_203;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1839_fu_251_p2 == 1'd1))) begin
        boxHCoord <= select_ln1866_fu_353_p3;
        boxVCoord <= select_ln1870_fu_379_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        icmp_ln1897_2_reg_741 <= icmp_ln1897_2_fu_436_p2;
        icmp_ln1897_3_reg_746 <= icmp_ln1897_3_fu_441_p2;
        icmp_ln1897_4_reg_751 <= icmp_ln1897_4_fu_452_p2;
        icmp_ln1897_5_reg_756 <= icmp_ln1897_5_fu_458_p2;
        or_ln1897_reg_735 <= or_ln1897_fu_430_p2;
        pixIn10_read_reg_642_pp0_iter2_reg <= pixIn10_read_reg_642_pp0_iter1_reg;
        pixIn6_read_reg_662_pp0_iter2_reg <= pixIn6_read_reg_662_pp0_iter1_reg;
        pixIn7_read_reg_657_pp0_iter2_reg <= pixIn7_read_reg_657_pp0_iter1_reg;
        pixIn8_read_reg_652_pp0_iter2_reg <= pixIn8_read_reg_652_pp0_iter1_reg;
        pixIn9_read_reg_647_pp0_iter2_reg <= pixIn9_read_reg_647_pp0_iter1_reg;
        pixIn_read_reg_667_pp0_iter2_reg <= pixIn_read_reg_667_pp0_iter1_reg;
        trunc_ln1824_reg_672_pp0_iter2_reg <= trunc_ln1824_reg_672_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pixIn10_read_reg_642 <= pixIn10;
        pixIn10_read_reg_642_pp0_iter1_reg <= pixIn10_read_reg_642;
        pixIn6_read_reg_662 <= pixIn6;
        pixIn6_read_reg_662_pp0_iter1_reg <= pixIn6_read_reg_662;
        pixIn7_read_reg_657 <= pixIn7;
        pixIn7_read_reg_657_pp0_iter1_reg <= pixIn7_read_reg_657;
        pixIn8_read_reg_652 <= pixIn8;
        pixIn8_read_reg_652_pp0_iter1_reg <= pixIn8_read_reg_652;
        pixIn9_read_reg_647 <= pixIn9;
        pixIn9_read_reg_647_pp0_iter1_reg <= pixIn9_read_reg_647;
        pixIn_read_reg_667 <= pixIn;
        pixIn_read_reg_667_pp0_iter1_reg <= pixIn_read_reg_667;
        trunc_ln1824_reg_672 <= trunc_ln1824_fu_212_p1;
        trunc_ln1824_reg_672_pp0_iter1_reg <= trunc_ln1824_reg_672;
        x_read_reg_627 <= x;
        x_read_reg_627_pp0_iter1_reg <= x_read_reg_627;
        y_read_reg_635 <= y;
        y_read_reg_635_pp0_iter1_reg <= y_read_reg_635;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln1856_fu_307_p2 == 1'd0) & (vDir_load_load_fu_303_p1 == 1'd0) & (icmp_ln1839_fu_251_p2 == 1'd1)) | ((icmp_ln1861_fu_329_p2 == 1'd1) & (vDir_load_load_fu_303_p1 == 1'd1) & (icmp_ln1839_fu_251_p2 == 1'd1)))) begin
        ap_phi_mux_empty_66_phi_fu_180_p8 = 1'd0;
    end else if ((((icmp_ln1861_fu_329_p2 == 1'd0) & (vDir_load_load_fu_303_p1 == 1'd1) & (icmp_ln1839_fu_251_p2 == 1'd1)) | ((icmp_ln1856_fu_307_p2 == 1'd1) & (vDir_load_load_fu_303_p1 == 1'd0) & (icmp_ln1839_fu_251_p2 == 1'd1)))) begin
        ap_phi_mux_empty_66_phi_fu_180_p8 = 1'd1;
    end else begin
        ap_phi_mux_empty_66_phi_fu_180_p8 = ap_phi_reg_pp0_iter1_empty_66_reg_177;
    end
end

always @ (*) begin
    if ((((icmp_ln1844_fu_269_p2 == 1'd0) & (hDir_load_load_fu_265_p1 == 1'd0) & (icmp_ln1839_fu_251_p2 == 1'd1)) | ((icmp_ln1849_fu_291_p2 == 1'd1) & (hDir_load_load_fu_265_p1 == 1'd1) & (icmp_ln1839_fu_251_p2 == 1'd1)))) begin
        ap_phi_mux_empty_phi_fu_163_p8 = 1'd0;
    end else if ((((icmp_ln1849_fu_291_p2 == 1'd0) & (hDir_load_load_fu_265_p1 == 1'd1) & (icmp_ln1839_fu_251_p2 == 1'd1)) | ((icmp_ln1844_fu_269_p2 == 1'd1) & (hDir_load_load_fu_265_p1 == 1'd0) & (icmp_ln1839_fu_251_p2 == 1'd1)))) begin
        ap_phi_mux_empty_phi_fu_163_p8 = 1'd1;
    end else begin
        ap_phi_mux_empty_phi_fu_163_p8 = ap_phi_reg_pp0_iter1_empty_reg_160;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1867_fu_347_p2 = (boxHCoord + zext_ln1824_fu_244_p1);

assign add_ln1871_fu_373_p2 = (boxVCoord + zext_ln1824_fu_244_p1);

assign add_ln1892_fu_446_p2 = (zext_ln1839_fu_393_p1 + 17'd1);

assign and_ln1902_fu_484_p2 = (xor_ln1902_fu_479_p2 & trunc_ln1824_reg_672_pp0_iter2_reg);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_192 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_248 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1839_fu_251_p2 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_phi_reg_pp0_iter0_boxLeft_reg_194 = 'bx;

assign ap_phi_reg_pp0_iter0_boxTop_reg_203 = 'bx;

assign ap_phi_reg_pp0_iter1_empty_66_reg_177 = 'bx;

assign ap_phi_reg_pp0_iter1_empty_reg_160 = 'bx;

assign ap_return_0 = pixOut_val_V_0_fu_508_p3;

assign ap_return_1 = pixOut_val_V_1_1_fu_495_p3;

assign ap_return_2 = pixOut_val_V_2_fu_502_p3;

assign ap_return_3 = pixOut_val_V_3_fu_539_p3;

assign ap_return_4 = pixOut_val_V_4_1_fu_545_p3;

assign ap_return_5 = pixOut_val_V_5_fu_552_p3;

assign boxBottom_fu_405_p2 = (ap_phi_reg_pp0_iter2_boxTop_reg_203 + boxSize);

assign boxRight_cast_fu_410_p1 = boxRight_fu_400_p2;

assign boxRight_fu_400_p2 = (ap_phi_reg_pp0_iter2_boxLeft_reg_194 + boxSize);

assign hDir_load_load_fu_265_p1 = hDir;

assign hMax_fu_216_p2 = (width - boxSize);

assign icmp_fu_238_p2 = ((tmp_fu_228_p4 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln1839_fu_251_p2 = ((or_ln1839_fu_247_p2 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln1844_fu_269_p2 = ((boxHCoord > hMax_fu_216_p2) ? 1'b1 : 1'b0);

assign icmp_ln1849_fu_291_p2 = ((boxHCoord < zext_ln1849_fu_287_p1) ? 1'b1 : 1'b0);

assign icmp_ln1856_fu_307_p2 = ((boxVCoord > vMax_fu_222_p2) ? 1'b1 : 1'b0);

assign icmp_ln1861_fu_329_p2 = ((boxVCoord < zext_ln1861_fu_325_p1) ? 1'b1 : 1'b0);

assign icmp_ln1897_1_fu_425_p2 = ((ap_phi_reg_pp0_iter2_boxTop_reg_203 > y_read_reg_635_pp0_iter1_reg) ? 1'b1 : 1'b0);

assign icmp_ln1897_2_fu_436_p2 = ((ap_phi_reg_pp0_iter2_boxLeft_reg_194 > x_read_reg_627_pp0_iter1_reg) ? 1'b1 : 1'b0);

assign icmp_ln1897_3_fu_441_p2 = ((x_read_reg_627_pp0_iter1_reg < boxRight_fu_400_p2) ? 1'b1 : 1'b0);

assign icmp_ln1897_4_fu_452_p2 = ((add_ln1892_fu_446_p2 < zext_ln1881_fu_396_p1) ? 1'b1 : 1'b0);

assign icmp_ln1897_5_fu_458_p2 = ((add_ln1892_fu_446_p2 < boxRight_cast_fu_410_p1) ? 1'b1 : 1'b0);

assign icmp_ln1897_fu_414_p2 = ((y_read_reg_635_pp0_iter1_reg < boxBottom_fu_405_p2) ? 1'b1 : 1'b0);

assign or_ln1839_fu_247_p2 = (y_read_reg_635 | x_read_reg_627);

assign or_ln1897_1_fu_469_p2 = (or_ln1897_reg_735 | icmp_ln1897_2_reg_741);

assign or_ln1897_2_fu_473_p2 = (xor_ln1897_1_fu_464_p2 | or_ln1897_1_fu_469_p2);

assign or_ln1897_3_fu_519_p2 = (or_ln1897_reg_735 | icmp_ln1897_4_reg_751);

assign or_ln1897_4_fu_523_p2 = (xor_ln1897_2_fu_514_p2 | or_ln1897_3_fu_519_p2);

assign or_ln1897_fu_430_p2 = (xor_ln1897_fu_419_p2 | icmp_ln1897_1_fu_425_p2);

assign or_ln1902_fu_529_p2 = (trunc_ln1824_reg_672_pp0_iter2_reg | icmp_fu_238_p2);

assign pixOut_val_V_0_fu_508_p3 = ((or_ln1897_2_fu_473_p2[0:0] == 1'b1) ? pixIn_read_reg_667_pp0_iter2_reg : boxColorR);

assign pixOut_val_V_1_1_fu_495_p3 = ((or_ln1897_2_fu_473_p2[0:0] == 1'b1) ? pixIn6_read_reg_662_pp0_iter2_reg : pixOut_val_V_1_fu_489_p3);

assign pixOut_val_V_1_fu_489_p3 = ((and_ln1902_fu_484_p2[0:0] == 1'b1) ? boxColorB : boxColorG);

assign pixOut_val_V_2_fu_502_p3 = ((or_ln1897_2_fu_473_p2[0:0] == 1'b1) ? pixIn7_read_reg_657_pp0_iter2_reg : boxColorB);

assign pixOut_val_V_3_fu_539_p3 = ((or_ln1897_4_fu_523_p2[0:0] == 1'b1) ? pixIn8_read_reg_652_pp0_iter2_reg : boxColorR);

assign pixOut_val_V_4_1_fu_545_p3 = ((or_ln1897_4_fu_523_p2[0:0] == 1'b1) ? pixIn9_read_reg_647_pp0_iter2_reg : pixOut_val_V_4_fu_533_p3);

assign pixOut_val_V_4_fu_533_p3 = ((or_ln1902_fu_529_p2[0:0] == 1'b1) ? boxColorG : boxColorB);

assign pixOut_val_V_5_fu_552_p3 = ((or_ln1897_4_fu_523_p2[0:0] == 1'b1) ? pixIn10_read_reg_642_pp0_iter2_reg : boxColorB);

assign select_ln1866_fu_353_p3 = ((ap_phi_mux_empty_phi_fu_163_p8[0:0] == 1'b1) ? sub_ln1869_fu_341_p2 : add_ln1867_fu_347_p2);

assign select_ln1870_fu_379_p3 = ((ap_phi_mux_empty_66_phi_fu_180_p8[0:0] == 1'b1) ? sub_ln1873_fu_367_p2 : add_ln1871_fu_373_p2);

assign shl_ln1_fu_318_p3 = {{motionSpeed}, {1'd0}};

assign shl_ln_fu_280_p3 = {{motionSpeed}, {1'd0}};

assign sub_ln1869_fu_341_p2 = (boxHCoord - zext_ln1824_fu_244_p1);

assign sub_ln1873_fu_367_p2 = (boxVCoord - zext_ln1824_fu_244_p1);

assign tmp_fu_228_p4 = {{color[7:1]}};

assign trunc_ln1824_fu_212_p1 = x[0:0];

assign vDir_load_load_fu_303_p1 = vDir;

assign vMax_fu_222_p2 = (height - boxSize);

assign xor_ln1897_1_fu_464_p2 = (icmp_ln1897_3_reg_746 ^ 1'd1);

assign xor_ln1897_2_fu_514_p2 = (icmp_ln1897_5_reg_756 ^ 1'd1);

assign xor_ln1897_fu_419_p2 = (icmp_ln1897_fu_414_p2 ^ 1'd1);

assign xor_ln1902_fu_479_p2 = (icmp_fu_238_p2 ^ 1'd1);

assign zext_ln1824_fu_244_p1 = motionSpeed;

assign zext_ln1839_fu_393_p1 = x_read_reg_627_pp0_iter1_reg;

assign zext_ln1849_fu_287_p1 = shl_ln_fu_280_p3;

assign zext_ln1861_fu_325_p1 = shl_ln1_fu_318_p3;

assign zext_ln1881_fu_396_p1 = ap_phi_reg_pp0_iter2_boxLeft_reg_194;

endmodule //design_1_v_tpg_0_0_tpgPatternBox
